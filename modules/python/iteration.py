import socket
import ssl

#Importing the module python tha has the paths.
sys.path.append('/home/heitor/Documents/PenTest/modules/python/')
import python

class Iteration(object):

    def __init__(self, domain, port):
        
        self.domain = domain
        self.port = port
        self.s=socket
    
    def openConnection(self):
        self.s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    def connectToServer(self):
        
        print ("=== "+self.domain+" ===")   
        self.s.connect((self.domain, self.port)
        )
        response = self.s.recv(1024).strip()
        print (response.strip())

    def sendRequestHTTP(self, iteration):
        
        self.iteration = iteration+"\n\n"+"Host: "+self.domain+"\n\n"
        self.s.send(self.iteration.encode('ascii'))
        response = self.s.recv(1024).strip()
        with open(python.enumerationHostInfoHTTPExtern, 'a') as f:
            f.write(response)
        
    def sendRequestHTTPS(self, iteration):
        
        self.iteration = iteration+"\n\n"+"Host: "+self.domain+"\n\n"
        #Wrap the packet.
        self.s = ssl.wrap_socket(self.s, keyfile=None, certfile=None, server_side=False, cert_reqs=ssl.CERT_NONE, ssl_version=ssl.PROTOCOL_SSLv23)
        self.s.send(self.iteration.encode('ascii'))
        response = self.s.recv(1024).strip()
        with open(python.enumerationHostInfoHTTPSExtern, 'a') as f:
            f.write(response)
    
    def sendRequestFTP(self, iteration):
        
        self.iteration = iteration
        self.s.send(self.iteration.encode('ascii'))
        response = self.s.recv(1024).strip()
        with open(python.enumerationHostInfoFTPExtern, 'a') as f:
            f.write(response)
    

    def sendRequestSMTP(self, iteration):
        
        self.iteration = iteration
        self.s.send(self.iteration.encode('ascii'))
        response = self.s.recv(1024).strip()
        with open(python.enumerationHostInfoSMTPExtern, 'a') as f:
            f.write(response)

    def closeConnection(self):
        
        self.s.close()
    


        



    
        